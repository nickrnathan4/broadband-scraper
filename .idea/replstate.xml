<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1428452856300">{:repl-history {:ide [], :local [&quot;(count MO-counties)&quot; &quot;(def state-lookup (get-state-lookup 29))&quot; &quot;(def MO-counties (get-counties 29))&quot; &quot;(generate-county-string MO-counties)&quot; &quot;state-lookup&quot; &quot;(def fips-codes (slurp \&quot;resources/national_fips_codes.txt\&quot;))&quot; &quot;fips-codes&quot; &quot;(first fips-codes)&quot; &quot;(defn csv-reader [fin]\n  (with-open [in-file (io/reader fin)]\n                   (doall\n                     (csv/read-csv in-file))))&quot; &quot;(def fips-fil (csv-reader \&quot;resources/fips_codes.csv\&quot;))&quot; &quot;(def fips-file (csv-reader \&quot;resources/fips_codes.csv\&quot;))&quot; &quot;fips-file&quot; &quot;(count fips-file)&quot; &quot;(div 36643 50)&quot; &quot;(/ 36643 50)&quot; &quot;(def fips-groups (partition 733 fips-file))&quot; &quot;(first fips-group)&quot; &quot;(first fips-groups)&quot; &quot;(def fips-groups (partition 50 fips-file))&quot; &quot;(count (first fips-groups))&quot; &quot;(map #(str (second %) (third %)) test-input)&quot; &quot;(map #(str (second %) (nth % 3)) test-input)&quot; &quot;(first fips-file)&quot; &quot;(take 1 '(\&quot;a\&quot; \&quot;b\&quot; \&quot;c\&quot;))&quot; &quot;(drop 1 '(\&quot;a\&quot; \&quot;b\&quot; \&quot;c\&quot;))&quot; &quot;(def dropped-header (drop 1 fips-file))&quot; &quot;(reduce #(str % \&quot; \&quot;)\n        (map #(str (second %) (nth % 2)) test-input)\n        )&quot; &quot;(map #(str (second %) (nth % 2)) test-input)&quot; &quot;(reduce #(str \&quot; \&quot;)\n        (map #(str (second %) (nth % 2)) test-input)\n        )&quot; &quot;(defn generate-fips-string [v]\n  (log/info \&quot;generate-fips-string\&quot;)\n  (if (and (second v) (nth v 2))\n    (let [fips-list (map #(str (second %) (nth % 2) \&quot; \&quot;) v)\n          ;fips-string\n          ]\n\n      fips-list\n      )\n    (log/info \&quot;index out of order\&quot;)\n    )\n  )&quot; &quot;(reduce str \&quot; \&quot;\n        (map #(str (second %) (nth % 2)) test-input)\n        )&quot; &quot;(defn generate-fips-string [v]\n  (log/info \&quot;generate-fips-string\&quot;)\n  (if (and (second v) (nth v 2))\n    (-&gt;&gt; v\n         (map #(str (second %) (nth % 2) \&quot; \&quot;) v)\n         (reduce str)\n         (clojure.string/trim)\n         (clojure.string/replace #\&quot; \&quot; \&quot;,\&quot;)\n         )\n\n    (log/info \&quot;index out of order\&quot;)\n    )\n  )&quot; &quot;(if (and (second v) (nth v 2))\n    (clojure.string/replace\n      (-&gt;&gt; v\n           (map #(str (second %) (nth % 2) \&quot; \&quot;) v)\n           (reduce str)\n           (clojure.string/trim))\n      #\&quot; \&quot; \&quot;,\&quot;))&quot; &quot;(defn generate-fips-string [v]\n  (log/info \&quot;generate-fips-string\&quot;)\n  (if (and (second v) (nth v 2))\n    (clojure.string/replace\n      (-&gt;&gt; v\n           (map #(str (second %) (nth % 2) \&quot; \&quot;) v)\n           (reduce str)\n           (clojure.string/trim))\n      #\&quot; \&quot; \&quot;,\&quot;))\n\n  (log/info \&quot;index out of order\&quot;)\n\n  )&quot; &quot;(defn generate-fips-string [v]\n  (log/info \&quot;generate-fips-string\&quot;)\n  (if (and (second v) (nth v 2))\n    (clojure.string/replace\n      (-&gt;&gt; v\n           (map #(str (second %) (nth % 2) \&quot; \&quot;) v)\n           (reduce str)\n           (clojure.string/trim))\n      #\&quot; \&quot; \&quot;,\&quot;)\n\n    (log/info \&quot;index out of order\&quot;))\n\n  )&quot; &quot;(defn generate-fips-string [v]\n  (log/info \&quot;generate-fips-string\&quot;)\n  (if (and (second v) (nth v 2))\n    (let [fips-list (map #(str (second %) (nth % 2) \&quot; \&quot;) v)\n          fips-string (reduce str fips-list)\n          trimmed (clojure.string.trim fips-string)\n          comma-delim (clojure.string/replace trimmed   #\&quot; \&quot; \&quot;,\&quot;)]\n      comma-delim)\n    (log/info \&quot;index out of order\&quot;)))&quot; &quot;(defn generate-fips-string [v]\n  (log/info \&quot;generate-fips-string\&quot;)\n  (if (and (second v) (nth v 2))\n    (let [fips-list (map #(str (second %) (nth % 2) \&quot; \&quot;) v)\n          fips-string (reduce str fips-list)\n          trimmed (clojure.string/trim fips-string)\n          comma-delim (clojure.string/replace trimmed   #\&quot; \&quot; \&quot;,\&quot;)]\n      comma-delim)\n    (log/info \&quot;index out of order\&quot;)))&quot; &quot;(def fips-groups (partition 733 dropped-header ))&quot; &quot;(count fips-groups)&quot; &quot;(def fips-groups (partition 50 dropped-header ))&quot; &quot;(def fips-groups (partition 100 dropped-header ))&quot; &quot;(defn pull-demo-data [fips-file]\n  (doall [group fips-file]\n         (do\n           (swap! counter inc)\n           (let [county-string (generate-fips-string group)\n                 m (get-demographics county-string)]\n             (write-csv (str \&quot;../demographics_2011_\&quot; @count \&quot;.csv\&quot;) m)))))&quot; &quot;(defn pull-demo-data [fips-file]\n  (doseq [group fips-file]\n         (do\n           (swap! counter inc)\n           (let [county-string (generate-fips-string group)\n                 m (get-demographics county-string)]\n             (write-csv (str \&quot;../demographics_2011_\&quot; @count \&quot;.csv\&quot;) m)))))&quot; &quot;(def test-input (first fips-groups))&quot; &quot;test-input&quot; &quot;(def test-duplicates (map #(str (second %) (nth % 2) \&quot; \&quot;) test-input))&quot; &quot;(def remove-duplicates [fips-list]\n  fips-list\n  )&quot; &quot;(defn remove-duplicates [fips-list]\n  fips-list\n  )&quot; &quot;(defn remove-duplicates [fips-list]\n  (distinct fips-list)\n  )&quot; &quot;(remove-duplicates test-duplicates)&quot; &quot;(generate-fips-string test-input)&quot; &quot;(defn pull-demo-data [fips-file]\n  (doseq [group fips-file]\n         (do\n           (swap! count inc)\n           (let [county-string (generate-fips-string group)\n                 m (get-demographics county-string)]\n             (write-csv (str \&quot;../demographics_2011_\&quot; @count \&quot;.csv\&quot;) m)))))&quot; &quot;(def count (atom 0))&quot; &quot;(defn get-demographics [counties]\n  (log/info (str \&quot;get-demographics: \&quot; counties))\n  (let [json (http/get (str base-url\n                            \&quot;demographic/jun2011/county/ids/\&quot;\n                            counties\n                            \&quot;?format=json\&quot;))]\n    (:Results\n      (json/read-str (:body @json)\n                     :key-fn keyword))))&quot; &quot;(defn generate-fips-string [v]\n  (log/info \&quot;generate-fips-string\&quot;)\n  (if (and (second v) (nth v 2))\n    (let [fips-list (map #(str (second %) (nth % 2) \&quot; \&quot;) v)\n          remove-duplicates (distinct fips-list)\n          fips-string (reduce str remove-duplicates)\n          trimmed (clojure.string/trim fips-string)\n          comma-delim (clojure.string/replace trimmed   #\&quot; \&quot; \&quot;,\&quot;)]\n      comma-delim)\n    (log/info \&quot;index out of order\&quot;)))&quot; &quot;(def fips-groups (partition 300 dropped-header ))&quot; &quot;(defn pull-demo-data [fips-file]\n  (doseq [group fips-file]\n         (do\n           (swap! pull-count inc)\n           (let [county-string (generate-fips-string group)\n                 m (get-demographics county-string)]\n             (write-csv (str \&quot;../demographics_2011_\&quot; @pull-count \&quot;.csv\&quot;) m)))))&quot; &quot;(defn get-demographics [counties]\n  (log/info (str \&quot;get-demographics: \&quot; counties))\n  (let [json (http/get (str base-url\n                            \&quot;demographic/jun2014/county/ids/\&quot;\n                            counties\n                            \&quot;?format=json\&quot;))]\n    (:Results\n      (json/read-str (:body @json)\n                     :key-fn keyword))))&quot; &quot;(defn pull-demo-data [fips-file]\n  (doseq [group fips-file]\n         (do\n           (swap! pull-count inc)\n           (let [county-string (generate-fips-string group)\n                 m (get-demographics county-string)]\n             (write-csv (str \&quot;../demographics_2014_\&quot; @pull-count \&quot;.csv\&quot;) m)))))&quot; &quot;(pull-demo-data fips-groups)&quot; &quot;(def cai-nat (http/get \&quot;http://www.broadbandmap.gov/broadbandmap/cai/jun2014/nation?format=json\&quot;))&quot; &quot;(def cai-nat-edn (:Results\n                   (json/read-str (:body cai-nat)\n                                  :key-fn keyword)))&quot; &quot;cai-nat&quot; &quot;(def cai-nat-edn (:Results (json/read-str (:body cai-nat) :key-fn keyword)))&quot; &quot;cai-nat-edn&quot; &quot;(write-csv \&quot;../cai-nat-14.csv\&quot;)&quot; &quot;(defn write-csv [path row-data]\n  (log/info \&quot;write-csv\&quot;)\n  (let [columns (keys (first row-data))\n        headers (map name columns)\n        rows (mapv #(mapv % columns) row-data)]\n    (with-open [file (io/writer path)]\n      (csv/write-csv file (cons headers rows)))))&quot; &quot;(write-csv \&quot;../cai-nat-14.csv\&quot; cai-nat-edn)&quot; &quot;(def cai-nat (http/get \&quot;http://www.broadbandmap.gov/broadbandmap/cai/jun2014/state/ids/01?format=json\&quot;))&quot; &quot;(write-csv \&quot;../cai-al-14.csv\&quot; cai-nat-edn)&quot; &quot;(def cai-nat (http/get \&quot;http://www.broadbandmap.gov/broadbandmap/cai/jun2011/state/ids/01?format=json\&quot;))&quot; &quot;(def cai-nat-edn (:Results (json/read-str (:body @cai-nat) :key-fn keyword)))&quot; &quot;(write-csv \&quot;../cai-al-11.csv\&quot; cai-nat-edn)&quot; &quot;(defn get-cai [state]\n  (http/get \n    (str base-url\n         \&quot;/cai/june11/state/ids/\&quot;\n         state\n         \&quot;?format=json\&quot;)))&quot; &quot;(defn get-cai [state]\n  (let [json \n        (http/get\n          (str base-url\n               \&quot;/cai/june11/state/ids/\&quot;\n               state\n               \&quot;?format=json\&quot;))]\n    (:Results (json/read-str (:body @json) :key-fn keyword))))&quot; &quot;(defn pull-grants [states state-mapping]\n  (doseq [state states]\n    (log/info (str \&quot;Pulling state: \&quot; ((keyword (str state)) state-mapping)))\n    (if (contains? state-mapping (keyword (str state)))\n      (do\n        (swap! pull-count inc)\n        (let [state-name ((keyword (str state)) state-mapping)\n              m (get-cai (calc-state-id state))]\n          (write-csv (str \&quot;../\&quot; state-name \&quot;_CAI_\&quot; @pull-count \&quot;.csv\&quot;) m)\n          (log/info \&quot;Written to csv.\&quot;))))))&quot; &quot;(def stateids (vec (range 1 57)))&quot; &quot;(defn pull-grants [states state-mapping]\n  (doseq [state states]\n    (log/info (str \&quot;Pulling state: \&quot; ((keyword (str state)) state-mapping)))\n    (if (contains? state-mapping (keyword (str state)))\n      (do\n        (swap! pull-count inc)\n        (let [state-name ((keyword (str state)) state-mapping)\n              m (get-cai (calc-state-id state))]\n          (write-csv (str \&quot;../\&quot; state-name \&quot;_cai11_\&quot; @pull-count \&quot;.csv\&quot;) m)\n          (log/info \&quot;Written to csv.\&quot;))))))&quot; &quot;(def state-mapping {:1 \&quot;AL\&quot;,\n                    :2 \&quot;AK\&quot;,\n                    :4 \&quot;AZ\&quot;,\n                    :5 \&quot;AR\&quot;,\n                    :6 \&quot;CA\&quot;,\n                    :8 \&quot;CO\&quot;,\n                    :9 \&quot;CT\&quot;,\n                    :10 \&quot;DE\&quot;,\n                    :11 \&quot;DC\&quot;,\n                    :12 \&quot;FL\&quot;,\n                    :13 \&quot;GA\&quot;,\n                    :15 \&quot;HI\&quot;,\n                    :16 \&quot;ID\&quot;,\n                    :17 \&quot;IL\&quot;,\n                    :18 \&quot;IN\&quot;,\n                    :19 \&quot;IA\&quot;,\n                    :20 \&quot;KS\&quot;,\n                    :21 \&quot;KY\&quot;,\n                    :22 \&quot;LA\&quot;,\n                    :23 \&quot;ME\&quot;,\n                    :24 \&quot;MD\&quot;,\n                    :25 \&quot;MA\&quot;,\n                    :26 \&quot;MI\&quot;,\n                    :27 \&quot;MN\&quot;,\n                    :28 \&quot;MS\&quot;,\n                    :29 \&quot;MO\&quot;,\n                    :30 \&quot;MT\&quot;,\n                    :31 \&quot;NE\&quot;,\n                    :32 \&quot;NV\&quot;,\n                    :33 \&quot;NH\&quot;,\n                    :34 \&quot;NJ\&quot;,\n                    :35 \&quot;NM\&quot;,\n                    :36 \&quot;NY\&quot;,\n                    :37 \&quot;NC\&quot;,\n                    :38 \&quot;ND\&quot;,\n                    :39 \&quot;OH\&quot;,\n                    :40 \&quot;OK\&quot;,\n                    :41 \&quot;OR\&quot;,\n                    :42 \&quot;PA\&quot;,\n                    :44 \&quot;RI\&quot;,\n                    :45 \&quot;SC\&quot;,\n                    :46 \&quot;SD\&quot;,\n                    :47 \&quot;TN\&quot;,\n                    :48 \&quot;TX\&quot;,\n                    :49 \&quot;UT\&quot;,\n                    :50 \&quot;VT\&quot;,\n                    :51 \&quot;VA\&quot;,\n                    :53 \&quot;WA\&quot;,\n                    :54 \&quot;WV\&quot;,\n                    :55 \&quot;WI\&quot;,\n                    :56 \&quot;WY\&quot;})&quot; &quot;(pull-cai '[1] state-mapping)&quot; &quot;(get-cai 1)&quot; &quot;(def testcai (get-cai 1))&quot; &quot;(calc-state-id 1)&quot; &quot;(http/get\n  (str base-url\n       \&quot;/cai/june11/state/ids/\&quot;\n       \&quot;01\&quot;\n       \&quot;?format=json\&quot;))&quot; &quot;(def test-cai (http/get\n       (str base-url\n            \&quot;/cai/june11/state/ids/\&quot;\n            \&quot;01\&quot;\n            \&quot;?format=json\&quot;)))&quot; &quot;@test-cai&quot; &quot;(defn get-cai [state]\n  (let [json\n        (http/get\n          (str base-url\n               \&quot;/cai/jun11/state/ids/\&quot;\n               state\n               \&quot;?format=json\&quot;))]\n    (:Results (json/read-str (:body @json) :key-fn keyword))))&quot; &quot;(def test-cai (http/get\n       (str base-url\n            \&quot;/cai/jun11/state/ids/\&quot;\n            \&quot;01\&quot;\n            \&quot;?format=json\&quot;)))&quot; &quot;test-cai&quot; &quot;(def testcai (get-cai (calc-state-id 1)))&quot; &quot;testcai&quot; &quot;(defn pull-cai [states state-mapping]\n  (doseq [state states]\n    (log/info (str \&quot;Pulling state: \&quot; ((keyword (str state)) state-mapping)))\n    (if (contains? state-mapping (keyword (str state)))\n      (do\n        (swap! pull-count inc)\n        (let [state-name ((keyword (str state)) state-mapping)\n              m (get-cai (calc-state-id state))]\n          (write-csv (str \&quot;../\&quot; state-name \&quot;_cai11_\&quot; @pull-count \&quot;.csv\&quot;) m)\n          (log/info \&quot;Written to csv.\&quot;))))))&quot; &quot;(defn pull-cai [states state-mapping]\n  (doseq [state states]\n    (log/info (str \&quot;Pulling state: \&quot; ((keyword (str state)) state-mapping)))\n    (if (contains? state-mapping (keyword (str state)))\n      (do\n        (swap! pull-count inc)\n        (let [state-name ((keyword (str state)) state-mapping)\n              m (get-cai (calc-state-id state))]\n          (write-csv (str \&quot;../\&quot; state-name \&quot;_cai14_\&quot; @pull-count \&quot;.csv\&quot;) m)\n          (log/info \&quot;Written to csv.\&quot;))))))&quot; &quot;(defn pull-cai [states state-mapping]\n  (doseq [state states]\n    (log/info (str \&quot;Pulling state: \&quot; ((keyword (str state)) state-mapping)))\n    (if (contains? state-mapping (keyword (str state)))\n      (do\n        (swap! pull-count inc)\n        (let [state-name ((keyword (str state)) state-mapping)\n              m (get-cai (calc-state-id state))]\n          (write-csv (str \&quot;cai14_\&quot; @pull-count \&quot;.csv\&quot;) m)\n          (log/info \&quot;Written to csv.\&quot;))))))&quot; &quot;(def test-cai (http/get\n       (str base-url\n            \&quot;/cai/jun2011/state/ids/\&quot;\n            \&quot;01\&quot;\n            \&quot;?format=json\&quot;)))&quot; &quot;(defn get-cai [state]\n  (let [json\n        (http/get\n          (str base-url\n               \&quot;/cai/jun2011/state/ids/\&quot;\n               state\n               \&quot;?format=json\&quot;))]\n    (:Results (json/read-str (:body @json) :key-fn keyword))))&quot; &quot;(defn pull-cai [states state-mapping]\n  (doseq [state states]\n    (log/info (str \&quot;Pulling state: \&quot; ((keyword (str state)) state-mapping)))\n    (if (contains? state-mapping (keyword (str state)))\n      (do\n        (swap! pull-count inc)\n        (let [state-name ((keyword (str state)) state-mapping)\n              m (get-cai (calc-state-id state))]\n          (write-csv (str \&quot;../cai11_\&quot; @pull-count \&quot;.csv\&quot;) m)\n          (log/info \&quot;Written to csv.\&quot;))))))&quot; &quot;(defn get-cai [state]\n  (let [json\n        (http/get\n          (str base-url\n               \&quot;/cai/jun2014/state/ids/\&quot;\n               state\n               \&quot;?format=json\&quot;))]\n    (:Results (json/read-str (:body @json) :key-fn keyword))))&quot; &quot;(def pull-count (atom 0))&quot; &quot;(defn pull-cai [states state-mapping]\n  (doseq [state states]\n    (log/info (str \&quot;Pulling state: \&quot; ((keyword (str state)) state-mapping)))\n    (if (contains? state-mapping (keyword (str state)))\n      (do\n        (swap! pull-count inc)\n        (let [state-name ((keyword (str state)) state-mapping)\n              m (get-cai (calc-state-id state))]\n          (write-csv (str \&quot;../cai14_\&quot; @pull-count \&quot;.csv\&quot;) m)\n          (log/info \&quot;Written to csv.\&quot;))))))&quot; &quot;(pull-cai stateids state-mapping)&quot;], :remote []}}</component>
</project>